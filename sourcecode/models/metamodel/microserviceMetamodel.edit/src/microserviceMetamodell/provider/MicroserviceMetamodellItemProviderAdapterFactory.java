/**
 */
package microserviceMetamodell.provider;

import java.util.ArrayList;
import java.util.Collection;

import microserviceMetamodell.util.MicroserviceMetamodellAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MicroserviceMetamodellItemProviderAdapterFactory extends MicroserviceMetamodellAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MicroserviceMetamodellItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.SystemModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemModelItemProvider systemModelItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.SystemModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemModelAdapter() {
		if (systemModelItemProvider == null) {
			systemModelItemProvider = new SystemModelItemProvider(this);
		}

		return systemModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.DomainModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainModelItemProvider domainModelItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.DomainModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainModelAdapter() {
		if (domainModelItemProvider == null) {
			domainModelItemProvider = new DomainModelItemProvider(this);
		}

		return domainModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.DomainModelLayer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainModelLayerItemProvider domainModelLayerItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.DomainModelLayer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainModelLayerAdapter() {
		if (domainModelLayerItemProvider == null) {
			domainModelLayerItemProvider = new DomainModelLayerItemProvider(this);
		}

		return domainModelLayerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.InfrastructureLayer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InfrastructureLayerItemProvider infrastructureLayerItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.InfrastructureLayer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInfrastructureLayerAdapter() {
		if (infrastructureLayerItemProvider == null) {
			infrastructureLayerItemProvider = new InfrastructureLayerItemProvider(this);
		}

		return infrastructureLayerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.TechnicalLayer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TechnicalLayerItemProvider technicalLayerItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.TechnicalLayer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTechnicalLayerAdapter() {
		if (technicalLayerItemProvider == null) {
			technicalLayerItemProvider = new TechnicalLayerItemProvider(this);
		}

		return technicalLayerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.Entity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityItemProvider entityItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.Entity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityAdapter() {
		if (entityItemProvider == null) {
			entityItemProvider = new EntityItemProvider(this);
		}

		return entityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.ValueObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueObjectItemProvider valueObjectItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.ValueObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueObjectAdapter() {
		if (valueObjectItemProvider == null) {
			valueObjectItemProvider = new ValueObjectItemProvider(this);
		}

		return valueObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.Service} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceItemProvider serviceItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.Service}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceAdapter() {
		if (serviceItemProvider == null) {
			serviceItemProvider = new ServiceItemProvider(this);
		}

		return serviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.Aggregate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AggregateItemProvider aggregateItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.Aggregate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAggregateAdapter() {
		if (aggregateItemProvider == null) {
			aggregateItemProvider = new AggregateItemProvider(this);
		}

		return aggregateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.Factory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FactoryItemProvider factoryItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.Factory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFactoryAdapter() {
		if (factoryItemProvider == null) {
			factoryItemProvider = new FactoryItemProvider(this);
		}

		return factoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.Repository} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepositoryItemProvider repositoryItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.Repository}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRepositoryAdapter() {
		if (repositoryItemProvider == null) {
			repositoryItemProvider = new RepositoryItemProvider(this);
		}

		return repositoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.DomainEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainEventItemProvider domainEventItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.DomainEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainEventAdapter() {
		if (domainEventItemProvider == null) {
			domainEventItemProvider = new DomainEventItemProvider(this);
		}

		return domainEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.Module} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModuleItemProvider moduleItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.Module}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModuleAdapter() {
		if (moduleItemProvider == null) {
			moduleItemProvider = new ModuleItemProvider(this);
		}

		return moduleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.BoundedContext} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BoundedContextItemProvider boundedContextItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.BoundedContext}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBoundedContextAdapter() {
		if (boundedContextItemProvider == null) {
			boundedContextItemProvider = new BoundedContextItemProvider(this);
		}

		return boundedContextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.Behaviour} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BehaviourItemProvider behaviourItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.Behaviour}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBehaviourAdapter() {
		if (behaviourItemProvider == null) {
			behaviourItemProvider = new BehaviourItemProvider(this);
		}

		return behaviourItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.SharedKernel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SharedKernelItemProvider sharedKernelItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.SharedKernel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSharedKernelAdapter() {
		if (sharedKernelItemProvider == null) {
			sharedKernelItemProvider = new SharedKernelItemProvider(this);
		}

		return sharedKernelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.CustomerSupplier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomerSupplierItemProvider customerSupplierItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.CustomerSupplier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomerSupplierAdapter() {
		if (customerSupplierItemProvider == null) {
			customerSupplierItemProvider = new CustomerSupplierItemProvider(this);
		}

		return customerSupplierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.UpstreamComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UpstreamComponentItemProvider upstreamComponentItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.UpstreamComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUpstreamComponentAdapter() {
		if (upstreamComponentItemProvider == null) {
			upstreamComponentItemProvider = new UpstreamComponentItemProvider(this);
		}

		return upstreamComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.DownstreamComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DownstreamComponentItemProvider downstreamComponentItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.DownstreamComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDownstreamComponentAdapter() {
		if (downstreamComponentItemProvider == null) {
			downstreamComponentItemProvider = new DownstreamComponentItemProvider(this);
		}

		return downstreamComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.Microservice} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MicroserviceItemProvider microserviceItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.Microservice}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMicroserviceAdapter() {
		if (microserviceItemProvider == null) {
			microserviceItemProvider = new MicroserviceItemProvider(this);
		}

		return microserviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.SynchronousInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SynchronousInterfaceItemProvider synchronousInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.SynchronousInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSynchronousInterfaceAdapter() {
		if (synchronousInterfaceItemProvider == null) {
			synchronousInterfaceItemProvider = new SynchronousInterfaceItemProvider(this);
		}

		return synchronousInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.AsynchronousInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AsynchronousInterfaceItemProvider asynchronousInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.AsynchronousInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAsynchronousInterfaceAdapter() {
		if (asynchronousInterfaceItemProvider == null) {
			asynchronousInterfaceItemProvider = new AsynchronousInterfaceItemProvider(this);
		}

		return asynchronousInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.RestEndpoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RestEndpointItemProvider restEndpointItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.RestEndpoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRestEndpointAdapter() {
		if (restEndpointItemProvider == null) {
			restEndpointItemProvider = new RestEndpointItemProvider(this);
		}

		return restEndpointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.ValueObjectNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueObjectNodeItemProvider valueObjectNodeItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.ValueObjectNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueObjectNodeAdapter() {
		if (valueObjectNodeItemProvider == null) {
			valueObjectNodeItemProvider = new ValueObjectNodeItemProvider(this);
		}

		return valueObjectNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.EntityNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityNodeItemProvider entityNodeItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.EntityNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityNodeAdapter() {
		if (entityNodeItemProvider == null) {
			entityNodeItemProvider = new EntityNodeItemProvider(this);
		}

		return entityNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.DeploymentConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeploymentConfigurationItemProvider deploymentConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.DeploymentConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeploymentConfigurationAdapter() {
		if (deploymentConfigurationItemProvider == null) {
			deploymentConfigurationItemProvider = new DeploymentConfigurationItemProvider(this);
		}

		return deploymentConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.GCloudConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GCloudConfigurationItemProvider gCloudConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.GCloudConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGCloudConfigurationAdapter() {
		if (gCloudConfigurationItemProvider == null) {
			gCloudConfigurationItemProvider = new GCloudConfigurationItemProvider(this);
		}

		return gCloudConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.ExternalDependency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalDependencyItemProvider externalDependencyItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.ExternalDependency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalDependencyAdapter() {
		if (externalDependencyItemProvider == null) {
			externalDependencyItemProvider = new ExternalDependencyItemProvider(this);
		}

		return externalDependencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.BuildConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BuildConfigurationItemProvider buildConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.BuildConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBuildConfigurationAdapter() {
		if (buildConfigurationItemProvider == null) {
			buildConfigurationItemProvider = new BuildConfigurationItemProvider(this);
		}

		return buildConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.SharedModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SharedModuleItemProvider sharedModuleItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.SharedModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSharedModuleAdapter() {
		if (sharedModuleItemProvider == null) {
			sharedModuleItemProvider = new SharedModuleItemProvider(this);
		}

		return sharedModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.KafkaConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KafkaConfigurationItemProvider kafkaConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.KafkaConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKafkaConfigurationAdapter() {
		if (kafkaConfigurationItemProvider == null) {
			kafkaConfigurationItemProvider = new KafkaConfigurationItemProvider(this);
		}

		return kafkaConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.Topic} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TopicItemProvider topicItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.Topic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTopicAdapter() {
		if (topicItemProvider == null) {
			topicItemProvider = new TopicItemProvider(this);
		}

		return topicItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link microserviceMetamodell.KubernetesClusterConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KubernetesClusterConfigurationItemProvider kubernetesClusterConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link microserviceMetamodell.KubernetesClusterConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKubernetesClusterConfigurationAdapter() {
		if (kubernetesClusterConfigurationItemProvider == null) {
			kubernetesClusterConfigurationItemProvider = new KubernetesClusterConfigurationItemProvider(this);
		}

		return kubernetesClusterConfigurationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (systemModelItemProvider != null) systemModelItemProvider.dispose();
		if (domainModelItemProvider != null) domainModelItemProvider.dispose();
		if (domainModelLayerItemProvider != null) domainModelLayerItemProvider.dispose();
		if (infrastructureLayerItemProvider != null) infrastructureLayerItemProvider.dispose();
		if (technicalLayerItemProvider != null) technicalLayerItemProvider.dispose();
		if (entityItemProvider != null) entityItemProvider.dispose();
		if (valueObjectItemProvider != null) valueObjectItemProvider.dispose();
		if (serviceItemProvider != null) serviceItemProvider.dispose();
		if (aggregateItemProvider != null) aggregateItemProvider.dispose();
		if (factoryItemProvider != null) factoryItemProvider.dispose();
		if (repositoryItemProvider != null) repositoryItemProvider.dispose();
		if (domainEventItemProvider != null) domainEventItemProvider.dispose();
		if (moduleItemProvider != null) moduleItemProvider.dispose();
		if (boundedContextItemProvider != null) boundedContextItemProvider.dispose();
		if (behaviourItemProvider != null) behaviourItemProvider.dispose();
		if (sharedKernelItemProvider != null) sharedKernelItemProvider.dispose();
		if (customerSupplierItemProvider != null) customerSupplierItemProvider.dispose();
		if (upstreamComponentItemProvider != null) upstreamComponentItemProvider.dispose();
		if (downstreamComponentItemProvider != null) downstreamComponentItemProvider.dispose();
		if (microserviceItemProvider != null) microserviceItemProvider.dispose();
		if (synchronousInterfaceItemProvider != null) synchronousInterfaceItemProvider.dispose();
		if (asynchronousInterfaceItemProvider != null) asynchronousInterfaceItemProvider.dispose();
		if (restEndpointItemProvider != null) restEndpointItemProvider.dispose();
		if (valueObjectNodeItemProvider != null) valueObjectNodeItemProvider.dispose();
		if (entityNodeItemProvider != null) entityNodeItemProvider.dispose();
		if (deploymentConfigurationItemProvider != null) deploymentConfigurationItemProvider.dispose();
		if (gCloudConfigurationItemProvider != null) gCloudConfigurationItemProvider.dispose();
		if (externalDependencyItemProvider != null) externalDependencyItemProvider.dispose();
		if (buildConfigurationItemProvider != null) buildConfigurationItemProvider.dispose();
		if (sharedModuleItemProvider != null) sharedModuleItemProvider.dispose();
		if (kafkaConfigurationItemProvider != null) kafkaConfigurationItemProvider.dispose();
		if (topicItemProvider != null) topicItemProvider.dispose();
		if (kubernetesClusterConfigurationItemProvider != null) kubernetesClusterConfigurationItemProvider.dispose();
	}

}
